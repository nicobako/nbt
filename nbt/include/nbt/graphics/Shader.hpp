#pragma once

#include <string>

namespace nbt {
namespace graphics {
/// \brief Enum representing all possible OpenGL shader types
enum shader_type {
  vertex,
  fragment,
  geometry,
  compute,
  tesselation_control,
  tesselation_evaluation
};

/// \brief Represents an OpenGL shader
class Shader {
public:
  /// \brief Simplest ctor
  ///
  /// \param shaderType The shader type \see shader_type
  ///
  /// You must at least specify the shader type.
  /// \note If you use this ctor, don't forget
  /// to set the source code for the shader later.
  /// \see setSource()
  Shader(shader_type shaderType);

  /// \brief Ctor that loads the source from a file.
  ///
  /// \param fileName A file containing OpenGL Shader Code
  Shader(shader_type shaderType, std::string const & fileName);

  virtual ~Shader();

  /// \brief Returns the shader_type
  shader_type const getType() const;
  /// \brief Returns the source code of the shader
  std::string const & getSource() const;
  /// \brief Sets the shader source when you want to hardcode it.
  void setSource(std::string const & source);
  /// \brief Compiles the shader source on the GPU and sets the shader's ID
  virtual void sendToGpu();
  /// \brief Returns a bool indicating if the shader was sent to the GPU
  bool sentToGpu() const;
  /// \brief Returns error message that
  ///  may have been generated during sendToGpu()
  std::string const & getErrorMessage() const;
  /// \brief Returns the id/name of the shader generated by OpenGL
  virtual unsigned const getId() const;

private:
  /// \brief Stores the shader type
  shader_type shaderType_;
  /// \brief Stores the source code of the shader
  std::string source_;
  /// \brief Stores the shader ID
  unsigned id_;
  /// \brief Stores the compilation error message
  ///  if there is a problem with compilation
  std::string errorMessage_;
  /// \brief Stores a bool indicating if there was
  /// a problem with compilation
  bool sentToGpu_;

  /// This function loads the source code from a file
  void loadSourceFromFile(std::string const & fileName);
};

} // namespace graphics
} // namespace nbt
